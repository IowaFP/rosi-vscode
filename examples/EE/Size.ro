import Ro.Base, Ro.Xr, Data.Functor, Data.List, Data.Nat, Data.Tuple, EE.Types

-------------------------------------------------------------------------------
-- Size

sizeB : FAlg (Sigma BoolF) Nat    -- Sigma BoolF Nat -> Nat
sizeB = case #'BConst (\u. one)
      | case #'If (\t. succ (add (sel t #'1) (add (sel t #'2) (sel t #'3))))

sizeA : FAlg (Sigma ArithF) Nat
sizeA = case #'IConst (\u. one)
       | case #'Plus (\t. succ (add (sel t #'1) (sel t #'2)))

sizeL : FAlg (Sigma LamF) Nat
sizeL = case #'Lam succ
      | case #'App (\t. succ (add (sel t #'1) (sel t #'2)))
      | case #'Var (\t. one)

sizeR : FAlg (Sigma RecF) Nat
sizeR = case #'Fix succ

sizeLB : FAlg (Sigma LBF) Nat
sizeLB = sizeL | sizeB

sizeAll : FAlg (Sigma AllF) Nat
sizeAll = sizeLB
        | sizeA
        | sizeR

-- Examples

szId : Nat
szId = cata (fmapS [AllF] functorAll) sizeAll xpId

szConst : Nat
szConst = cata (fmapS [AllF] functorAll) sizeAll xpConst

szNot : Nat
szNot = cata (fmapS [AllF] functorAll) sizeAll xpNot

-- Sizeg as a bounded algebra

type RConst : * -> R[* -> *] -> *  -- kind polymorphism still not a thing...
type RConst = \x y. x

sizeBb : Xh BoolF (RConst Nat)
sizeBb = case #'BConst (\u rec. one)
       | case #'If (\t rec. succ (add (rec (sel t #'1)) (add (rec (sel t #'2)) (rec (sel t #'3)))))

sizeAb : Xh ArithF (RConst Nat)
sizeAb = case #'IConst (\u rec. one)
       | case #'Plus (\t rec. succ (add (rec (sel t #'1)) (rec (sel t #'2))))

sizeLb : Xh LamF (RConst Nat)
sizeLb = case #'Lam (\e rec. succ (rec e))
       | case #'App (\t rec. succ (add (rec (sel t #'1)) (rec (sel t #'2))))
       | case #'Var (\t rec. one)

sizeRb : Xh RecF (RConst Nat)
sizeRb = case #'Fix (\e rec. succ (rec e))

-- Okay, the type annotations here are getting out of hand again... time to
-- figure out what's going wrong in type inference.

type ABF : R[* -> *]
type ABF = { 'BConst := (\t. Bool), 'If := (\t. Triple t t t)
           , 'IConst := (\t. Nat), 'Plus := (\t. Pair t t) }

type LRF : R[* -> *]
type LRF = { 'Var := Const Nat, 'Lam := Id, 'App := (\t. Pair t t)
           , 'Fix := (\t. t) }

sizeAllb : Xh AllF (RConst Nat)
sizeAllb = (sizeBb | sizeAb) | (sizeLb | sizeRb)

-- Examples (again)

sizeb : Mu (Sigma AllF) -> Nat
sizeb = histo sizeAllb

szId0 : Nat
szId0 = sizeb xpId

szConst0 : Nat
szConst0 = sizeb xpConst

szNot0 : Nat
szNot0 = sizeb xpNot