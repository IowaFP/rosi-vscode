import Ro.Base, Ro.Xr, Data.Functor, Data.List, Data.Nat, Data.Tuple, EE.Types

-------------------------------------------------------------------------------
-- Evaluation
--
-- The idea is that we'd write functions like:
--
--     evalA = case #'IConst (\n. n)
--           | case #'Plus (\p. add (evalA (sel p #'1)) (evalA (sel p #'2)))
--
-- and then put them together to make the eval function for the whole type. The
-- challenges are:
--
--   1. Each sublanguage will have its own evaluation results: natural numbers,
--      Booleans, or whatever.
--   2. Therefore, the results of evaluation may not actually be the right type.
--   3. The results of the function sublanguage *include* the original language,
--      'cause closures.
--
-- Put those together, and we get something more like:


as : forall l f z. { l := f } < z, { 'Err := (\w. Unit) } < z =>
     #l -> Mu (Sigma z) -> (f (Mu (Sigma z)) -> Mu (Sigma z)) -> Mu (Sigma z)
as = \l w f.
      match (out w)
      ( case l f
      | const (rcon #'Err tt))

type Env : R[* -> *] -> *
type Env = \z. List (Mu (Sigma z))

type ValA : R[R[* -> *] -> * -> *]
type ValA = { 'Nat := (\expr. \val. Nat), 'Err := (\expr. \val. Unit) }

evalA : forall valr. ValA < valr =>
        Xh ArithF (\expr. Env (valr expr) -> Mu (Sigma (valr expr)))
evalA = \exp rec env.
           match exp
           ( case #'IConst (rcon #'Nat)
           | case #'Plus (\p.
               as #'Nat (rec (sel p #'1) env) (\i.
               as #'Nat (rec (sel p #'2) env) (\j.
                 rcon #'Nat (add i j))))
           )

type ValB : R[R[* -> *] -> * -> *]
type ValB = { 'Bool := (\expr. \val. Bool), 'Err := (\expr. \val. Unit) }

evalB : forall valr. ValB < valr =>
        Xh BoolF (\expr. Env (valr expr) -> Mu (Sigma (valr expr)))
evalB = \exp rec env.
           match exp
           ( case #'BConst (rcon #'Bool)
           | case #'If (\t.
               as #'Bool (rec (sel t #'1) env)
               ( case #'True (const (rec (sel t #'2) env))
               | case #'False (const (rec (sel t #'3) env))
               ))
           )

type ValF : R[R[* -> *] -> * -> *]
type ValF = { 'Clos := (\expr. \val. Pair (List val) (Mu (Sigma expr))), 'Err := (\expr. \val. Unit) }

evalF : forall valr. ValF < valr =>
        Xh LamF (\expr. Env (valr expr) -> Mu (Sigma (valr expr)))
evalF = \exp rec env.
           match exp
           ( case #'Var (\x. fromMaybe (rcon #'Err tt) (nth env x)) -- (o (maybe (rcon #'Err tt) id) (nth env))
           | case #'Lam (\e. rcon #'Clos (pair env e))
           | case #'App (\p.
               as #'Clos (rec (fst p) env) (\clos.
                 (rec (snd clos)) (cons (rec (snd p) env) (fst clos))))
           )

evalAB : forall valr.
         ValA < valr, ValB < valr =>
         Xh ABF (\expr. Env (valr expr) -> Mu (Sigma (valr expr)))
evalAB = evalA | evalB

xpThree : Mu (Sigma (ArithF))
xpThree = rcon #'Plus (pair (rcon #'IConst one) (rcon #'IConst two))

evThree : Mu (Sigma { 'Nat := (\val. Nat), 'Err := (\val. Unit) })
evThree = histo evalA xpThree nil

xpThreee : Mu (Sigma (ABF))
xpThreee = rcon #'Plus (pair (rcon #'IConst one) (rcon #'IConst two))

evThreee : Mu (Sigma { 'Nat := (\val. Nat), 'Bool := (\val. Bool), 'Err := (\val. Unit) })
evThreee = histo evalAB xpThreee nil

evalABL : forall valr.
        ValA < valr, ValB < valr, ValF < valr =>
        Xh ABLF (\expr. Env (valr expr) -> Mu (Sigma (valr expr)))
evalABL = evalAB | evalF

xpThreeee : Mu (Sigma ABLF)
xpThreeee = rcon #'App (pair (rcon #'Lam (rcon #'Var zero))
                             (rcon #'Plus (pair (rcon #'IConst one) (rcon #'IConst two))))

evThreeee : Mu (Sigma { 'Nat := (\val. Nat), 'Bool := (\val. Bool)
                      , 'Clos := (\val. Pair (List val) (Mu (Sigma ABLF)))
                      , 'Err := (\val. Unit) })
evThreeee = histo evalABL xpThreeee nil

xpTrue : Mu (Sigma ABLF)
xpTrue = rcon #'App (pair (rcon #'Lam (rcon #'Var zero))
                          (rcon #'BConst True))

evTrue : Mu (Sigma { 'Nat := (\val. Nat), 'Bool := (\val. Bool)
                   , 'Clos := (\val. Pair (List val) (Mu (Sigma ABLF)))
                   , 'Err := (\val. Unit) })
evTrue = histo evalABL xpTrue nil

xpIdd : Mu (Sigma ABLF)
xpIdd = rcon #'App (pair (rcon #'Lam (rcon #'Var zero))
                         (rcon #'Lam (rcon #'Var zero)))

evIdd : Mu (Sigma { 'Nat := (\val. Nat), 'Bool := (\val. Bool)
                  , 'Clos := (\val. Pair (List val) (Mu (Sigma ABLF)))
                  , 'Err := (\val. Unit) })
evIdd = histo evalABL xpIdd nil

xpBoom : Mu (Sigma ABLF)
xpBoom = rcon #'App (pair (rcon #'BConst True) (rcon #'BConst True))

evBoom : Mu (Sigma { 'Nat := (\val. Nat), 'Bool := (\val. Bool)
                   , 'Clos := (\val. Pair (List val) (Mu (Sigma ABLF)))
                   , 'Err := (\val. Unit) })
evBoom = histo evalABL xpBoom nil

-------------------------------------------------------------------------------
-- Naive evaluations functions
--
-- Just to make sure that the code in the paper is correct...


naiveA : Mu (Sigma ArithF) -> Nat
naiveA = fix (\ rec exp. match (out exp)
  ( case #'IConst id
  | case #'Plus (\ p. add (rec (sel p #'1))
                          (rec (sel p #'2)))))

naiveB : Mu (Sigma BoolF) -> Bool
naiveB = fix (\ rec exp. match (out exp)
  ( case #'BConst id
  | case #'If (\ t. match (rec (sel t #'1))
      ( case #'True (const (rec (sel t #'2)))
      | case #'False (const (rec (sel t #'3)))))))
